void new_main(const vector<island>& islands, const int n, const int m, const int k)
{
	vector<int> result(k + 1, INT32_MAX - 1);
	vector a(k + 1, vector<int>(n / 2, INT32_MAX - 1));

	result[0] = 0;
	a[0][0] = 0;

	vector a_copy = a;

	a[0][1] = min(a_copy[0][1], a_copy[0][0] + 3);

	result[1] = min(a_copy[0][0] + 1 + 9, a_copy[0][0] + 2 + 1);


	a[1][0] = min(a_copy[0][0] + 1 + 9 + 1, a_copy[0][0] + 2 + 1 + 2);
	a[1][1] = min(a_copy[0][0] + 1 + 9 + 2, a_copy[0][0] + 2 + 1 + 1);

	result[2] = min(result[2], a_copy[0][0] + 1 + 9 + 1 + 1);


	a[2][0] = min(a_copy[2][0], a_copy[0][0] + 1 + 9 + 1 + 1 + 2);
	a[2][1] = min(a_copy[2][1], a_copy[0][0] + 1 + 9 + 1 + 1 + 1);

	a[0][0]++;
	a[0][1]++;
	a[1][0]++;
	a[1][1]++;
	a[2][0]++;
	a[2][1]++;

	a_copy = a;

	a[0][0] = min(a_copy[0][0], a_copy[0][1] + 3);
	a[0][1] = min(a_copy[0][1], a_copy[0][0] + 3);

	a_copy = a;
	result[1] = min(result[1], min(a_copy[0][0] + 2 + 5, a_copy[0][1] + 1 + 5));

	a[1][0] = min(a_copy[1][0], min(a_copy[0][0] + 1 + 9 + 1, a_copy[0][0] + 2 + 1 + 2));
	a[1][1] = min(a_copy[1][1], min(a_copy[0][0] + 1 + 9 + 2, a_copy[0][0] + 2 + 1 + 1));

	a_copy = a;
	result[2] = min(result[2], min(a_copy[1][0] + 2 + 5, a_copy[1][1] + 1 + 5));

	a[2][0] = min(a_copy[2][0], min(a_copy[1][0] + 2 + 5 + 2, a_copy[1][1] + 1 + 5 + 2));
	a[2][1] = min(a_copy[2][1], min(a_copy[1][0] + 2 + 5 + 1, a_copy[1][1] + 1 + 5 + 1));

	result[3] = min(result[3], min(a_copy[2][0] + 2 + 5, a_copy[2][1] + 1 + 5));
	a[3][0] = min(a[3][0], min(a_copy[2][0] + 2 + 5 + 2, a_copy[2][1] + 1 + 5 + 2));
	a[3][1] = min(a[3][1], min(a_copy[2][0] + 2 + 5 + 1, a_copy[2][1] + 1 + 5 + 1));

	a[0][0]++;
	a[0][1]++;
	a[1][0]++;
	a[1][1]++;
	a[2][0]++;
	a[2][1]++;
	a[3][0]++;
	a[3][1]++;

	a_copy = a;

	a[0][0] = min(a_copy[0][0], a_copy[0][1] + 3);
	a[0][1] = min(a_copy[0][1], a_copy[0][0] + 3);

	result[1] = min(result[1], min(a_copy[0][0] + 1 + 6, a_copy[0][1] + 2 + 6));

	a[1][0] = min(a_copy[1][0], min(a_copy[0][0] + 1 + 6 + 1, a_copy[0][1] + 2 + 6 + 1));
	a[1][1] = min(a_copy[1][1], min(a_copy[0][0] + 1 + 6 + 2, a_copy[0][1] + 2 + 6 + 2));

	result[2] = min(result[2], min(a_copy[1][0] + 1 + 6, a_copy[1][1] + 2 + 6));

	a[2][0] = min(a_copy[2][0], min(a_copy[1][0] + 1 + 6 + 1, a_copy[1][1] + 2 + 6 + 1));
	a[2][1] = min(a_copy[2][1], min(a_copy[1][0] + 1 + 6 + 2, a_copy[1][1] + 2 + 6 + 2));

	result[3] = min(result[3], min(a_copy[2][0] + 1 + 6, a_copy[2][1] + 2 + 6));

	a[3][0] = min(a_copy[3][0], min(a_copy[2][0] + 1 + 6 + 1, a_copy[2][1] + 2 + 6 + 1));
	a[3][1] = min(a_copy[3][1], min(a_copy[2][0] + 1 + 6 + 2, a_copy[2][1] + 2 + 6 + 2));

	result[4] = min(result[4], min(a_copy[3][0] + 1 + 6, a_copy[3][1] + 2 + 6));

	a[4][0] = min(a_copy[4][0], min(a_copy[3][0] + 1 + 6 + 1, a_copy[3][1] + 2 + 6 + 1));
	a[4][1] = min(a_copy[4][1], min(a_copy[3][0] + 1 + 6 + 2, a_copy[3][1] + 2 + 6 + 2));

	a[0][0]++;
	a[0][1]++;
	a[1][0]++;
	a[1][1]++;
	a[2][0]++;
	a[2][1]++;
	a[3][0]++;
	a[3][1]++;
	a[4][0]++;
	a[4][1]++;

	a_copy = a;

	a[0][0] = min(a_copy[0][0], a_copy[0][1] + 3);
	a[0][1] = min(a_copy[0][1], a_copy[0][0] + 3);

	result[1] = min(result[1], min(a_copy[0][0] + 2 + 2, a_copy[0][1] + 1 + 2));

	a[1][0] = min(a_copy[1][0], min(a_copy[0][0] + 2 + 2 + 2, a_copy[0][1] + 1 + 2 + 2));
	a[1][1] = min(a_copy[1][1], min(a_copy[0][0] + 2 + 2 + 1, a_copy[0][1] + 1 + 2 + 1));

	result[2] = min(result[2], min(a_copy[1][0] + 2 + 2, a_copy[1][1] + 1 + 2));

	a[2][0] = min(a_copy[2][0], min(a_copy[1][0] + 2 + 2 + 2, a_copy[1][1] + 1 + 2 + 2));
	a[2][1] = min(a_copy[2][1], min(a_copy[1][0] + 2 + 2 + 1, a_copy[1][1] + 1 + 2 + 1));

	result[3] = min(result[3], min(a_copy[2][0] + 2 + 2, a_copy[2][1] + 1 + 2));
	a[3][0] = min(a_copy[3][0], min(a_copy[2][0] + 2 + 2 + 2, a_copy[2][1] + 1 + 2 + 2));
	a[3][1] = min(a_copy[3][1], min(a_copy[2][0] + 2 + 2 + 1, a_copy[2][1] + 1 + 2 + 1));

	result[4] = min(result[4], min(a_copy[3][0] + 2 + 2, a_copy[3][1] + 1 + 2));
	a[4][0] = min(a_copy[4][0], min(a_copy[3][0] + 2 + 2 + 2, a_copy[3][1] + 1 + 2 + 2));
	a[4][1] = min(a_copy[4][1], min(a_copy[3][0] + 2 + 2 + 1, a_copy[3][1] + 1 + 2 + 1));

	result[5] = min(result[5], min(a_copy[4][0] + 2 + 2, a_copy[4][1] + 1 + 2));
	a[5][0] = min(a_copy[5][0], min(a_copy[4][0] + 2 + 2 + 2, a_copy[4][1] + 1 + 2 + 2));
	a[5][1] = min(a_copy[5][1], min(a_copy[4][0] + 2 + 2 + 1, a_copy[4][1] + 1 + 2 + 1));

	for (const int i : result)
	{
		cout << i << " ";
	}
}